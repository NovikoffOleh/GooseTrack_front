{"version":3,"file":"static/js/219.022027cb.chunk.js","mappings":"0MAAO,IAAMA,EAAuB,SAAAC,GAAK,oBAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAAOC,YAAX,aAAI,EAAaC,UAAjB,EAC5BC,EAAa,SAAAH,GAAK,oBAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAAOC,YAAX,aAAI,EAAaG,IAAjB,EAElBC,EAAwB,SAAAL,GAAK,oBAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAAOC,YAAX,aAAI,EAAaK,SAAjB,C,4GCD7BC,EAAkB,SAAAP,GAAK,oBAAGA,QAAH,IAAGA,GAAH,UAAGA,EAAOQ,eAAV,aAAG,EAAgBF,SAAnB,ECDvBG,EAAuB,SAAAT,GAAK,oBAAGA,QAAH,IAAGA,GAAH,UAAGA,EAAOU,aAAV,aAAG,EAAcJ,SAAjB,E,6BCC5BK,EAAUC,EAAAA,EAAAA,IAAH,2OASI,qBAAEC,MAAiBC,OAAOC,aAA1B,I,mBCPXC,EAAS,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAEdC,GAAcC,EAAAA,EAAAA,KAAWL,OAE/B,GAAGG,EACC,OACI,SAACN,EAAD,WACI,SAAC,KAAD,CACIG,OAAQI,EAAYE,gBAKvC,E,kLCVYC,EAAYT,EAAAA,EAAAA,IAAH,ycAUE,YAAoB,IAAlBU,EAAiB,EAAjBA,KAAMT,EAAW,EAAXA,MACxB,OAAQS,GACJ,IAAK,UACD,OAAOT,EAAMC,OAAOS,QACxB,IAAK,OACD,OAAOV,EAAMC,OAAOU,OAGxB,QACI,MAAO,qBAElB,GAEyBC,GACN,YAAoB,IAAlBH,EAAiB,EAAjBA,KAAiB,EAAXT,MACxB,OAAQS,GACJ,IAAK,UACD,MAAM,OAAN,OAAcI,EAAd,KACJ,IAAK,OACD,MAAM,OAAN,O,iyZAAA,kB,60ZAAA,kBAA4CC,EAA5C,KAGJ,QACI,MAAM,OAAN,OAAcF,EAAd,KAEX,IAEkB,YAAoB,IAAlBH,EAAiB,EAAjBA,KAAiB,EAAXT,MACvB,OAAQS,GACJ,IAAK,UACD,MAAM,YACV,IAAK,OACD,MAAM,kBACV,IAAK,OACL,MAAM,YACN,QACI,MAAM,YAEjB,IAEsB,YAAoB,IAAlBA,EAAiB,EAAjBA,KAAiB,EAAXT,MAC3B,OAAQS,GACJ,IAAK,UACD,MAAM,cACV,IAAK,OACD,MAAM,iCACV,IAAK,OACL,MAAM,aACN,QACI,MAAM,aAEjB,IAIQM,EAAOhB,EAAAA,EAAAA,EAAH,mK,UCpEJiB,EAAe,WAExB,IAAMZ,GAAYa,EAAAA,EAAAA,YAAWC,EAAAA,IAAqBd,UAC5Ce,GAAOF,EAAAA,EAAAA,YAAWC,EAAAA,IAAqBC,KACvCV,GAAOQ,EAAAA,EAAAA,YAAWC,EAAAA,IAAqBT,KAE7C,GAAGL,EACC,OACI,SAACI,EAAD,CAAWC,KAAMA,EAAjB,UACI,SAACM,EAAD,CAAMN,KAAMA,EAAZ,SAAmBU,KAKlC,E,UChBD,MCQO,WACL,IAYMC,EAPuB,EALPC,EAAAA,EAAAA,IAAY7B,EAAAA,KAEV6B,EAAAA,EAAAA,IAAY3B,IACd2B,EAAAA,EAAAA,IAAYzB,IASa0B,MAC7C,SAAAC,GAAM,OAAe,IAAXA,CAAJ,IAGFvB,GAAQwB,EAAAA,EAAAA,MAAiBxB,MAE/B,OACE,UAAC,IAAD,CAAeA,MAAOA,EAAtB,WACE,SAAC,KAAD,KACA,SAACG,EAAD,CAAQC,UAAWgB,KACnB,SAACJ,EAAD,MAGL,C","sources":["redux/auth/selectors.js","redux/reviews/selectors.js","redux/tasks/selectors.js","utils/Loader/Loader.styled.js","utils/Loader/Loader.jsx","utils/Notification/Notification.styled.js","utils/Notification/Notification.jsx","utils/Layout/index.js","utils/Layout/Layout.jsx"],"sourcesContent":["export const selectIsLoggedInUser = state => state?.auth?.isLoggedIn;\nexport const selectUser = state => state?.auth?.user;\nexport const selectIsRefreshingUser = state => state?.auth?.isRefreshing;\nexport const selectIsIsLoadingUser = state => state?.auth?.isLoading;\n","export const selectError = state => state?.reviews?.error;\nexport const selectReviews = state => state?.reviews?.reviews;\nexport const selectIsLoading = state=> state?.reviews?.isLoading;\n","export const selectErrorTasks = state => state?.tasks?.error;\nexport const selectIsLoadingTasks = state=> state?.tasks?.isLoading;\nexport const selectAllTasks = state => state?.tasks?.tasks;\n","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: ${({theme}) => theme.colors.loaderWrapper};\n    opacity: 0.4;\n\n`;","import { ColorRing } from \"react-loader-spinner\";\nimport { Wrapper } from \"./Loader.styled\";\nimport { useTheme } from \"@emotion/react\";\n\nexport const Loader = ({isVisible}) => {\n    \n    const themeColors = useTheme().colors;\n\n    if(isVisible) { \n        return(\n            <Wrapper>\n                <ColorRing \n                    colors={themeColors.loaderCircle}\n                />\n            </Wrapper>\n        );\n    }\n};\n\n","import styled from \"@emotion/styled\";\nimport gooseFly from '../../images/others/notification/goose-fly.png';\nimport gooseOk from '../../images/others/notification/goose-ok.png';\nimport bone1 from '../../images/others/notification/goose-bone1.png';\nimport bone2 from '../../images/others/notification/goose-bone2.png';\nimport gooseHead from '../../images/others/notification/goose-head.png';\n\nexport const Container = styled.div`\n    position: fixed;\n    top: 0;\n    right: 0;\n    width: 320px;\n    min-height: 80px;\n    border-radius: 0 0 0 16px;\n    display: flex;\n    align-items: center;\n\n    background-color: ${({type, theme}) => {\n        switch (type) {\n            case 'success':\n                return theme.colors.saccess;\n            case 'fail':\n                return theme.colors.failed;\n            case 'info':\n            return 'rgb(152, 148, 148)';\n            default:\n                return 'rgb(152, 148, 148)';\n        }   \n    }};\n\n    //background-image: url(${gooseFly});\n    background-image: ${({type, theme}) => {\n        switch (type) {\n            case 'success':\n                return `url(${gooseOk})`;\n            case 'fail':\n                return `url(${bone1}), url(${bone2}), url(${gooseHead})`;\n            case 'info':\n            return `url(${gooseFly})`;\n            default:\n                return `url(${gooseFly})`;\n        }   \n    }};\n    //background-size: auto 40px;\n    background-size: ${({type, theme}) => {\n        switch (type) {\n            case 'success':\n                return `auto 60px`;\n            case 'fail':\n                return `43px, 43px,35px`;\n            case 'info':\n            return `auto 50px`;\n            default:\n                return `auto 40px`;\n        }   \n    }};\n    //background-position: 5px center;\n    background-position: ${({type, theme}) => {\n        switch (type) {\n            case 'success':\n                return `13px center`;\n            case 'fail':\n                return `25px 33px, 25px 33px, 29px 8px`;\n            case 'info':\n            return `6px center`;\n            default:\n                return `5px center`;\n        }   \n    }};\n    background-repeat: no-repeat;\n`;\n\nexport const Text = styled.p`\n    color: white;\n    padding-left: 100px;\n    height: 100%;\n    display: flex;\n    justify-content: start;\n    align-items: center;\n`;","import { useContext } from \"react\"\nimport { Container, Text } from \"./Notification.styled\"\nimport { NotificationContext } from \"helpers/notification\"\n\nexport const Notification = () => {\n\n    const isVisible = useContext(NotificationContext).isVisible;\n    const text = useContext(NotificationContext).text;\n    const type = useContext(NotificationContext).type;\n\n    if(isVisible) {\n        return (\n            <Container type={type}>\n                <Text type={type}>{text}</Text>\n            </Container>\n        )\n    };\n    \n}","import { Layout } from './Layout';\n\nexport default Layout;\n","import { useSelector } from \"react-redux\";\nimport { Outlet } from \"react-router-dom\";\nimport { selectIsIsLoadingUser } from \"redux/auth/selectors\";\nimport { selectIsLoading } from \"redux/reviews/selectors\";\nimport { selectIsLoadingTasks } from \"redux/tasks/selectors\";\nimport { Loader } from \"utils/Loader/Loader\";\nimport { Notification } from \"utils/Notification/Notification\";\nimport { useThemeColors } from 'components/User/Header/ThemeToggler/ThemeContext';\nimport { ThemeProvider } from '@emotion/react';\n\nexport function Layout() {\n  const isAuthLoading = useSelector(selectIsIsLoadingUser);\n  // const isModalLoading = useSelector(/* modal isLoading selector */);\n  const isReviewLoading = useSelector(selectIsLoading);\n  const isTaskLoading = useSelector(selectIsLoadingTasks);\n\n  const loadingStatusesArray = [\n    isAuthLoading,\n    // isModalLoading,\n    isReviewLoading,\n    isTaskLoading,\n  ];\n\n  const isAnythingLoading = loadingStatusesArray.some(\n    status => status === true\n  );\n\n  const theme = useThemeColors().theme;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Outlet />\n      <Loader isVisible={isAnythingLoading} />\n      <Notification />\n    </ThemeProvider>\n  );\n};\n"],"names":["selectIsLoggedInUser","state","auth","isLoggedIn","selectUser","user","selectIsIsLoadingUser","isLoading","selectIsLoading","reviews","selectIsLoadingTasks","tasks","Wrapper","styled","theme","colors","loaderWrapper","Loader","isVisible","themeColors","useTheme","loaderCircle","Container","type","saccess","failed","gooseFly","gooseOk","gooseHead","Text","Notification","useContext","NotificationContext","text","isAnythingLoading","useSelector","some","status","useThemeColors"],"sourceRoot":""}