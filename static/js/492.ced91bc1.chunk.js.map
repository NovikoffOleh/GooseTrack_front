{"version":3,"file":"static/js/492.ced91bc1.chunk.js","mappings":"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","sources":["components/Auth/LoginForm/LoginForm.styled.js","components/Auth/AuthField/AuthField.jsx","components/Auth/LoginForm/ForgotPassword/ForgotPasswordModal.styled.js","components/Auth/LoginForm/ForgotPassword/ForgotPasswordModal.jsx","components/Auth/LoginForm/ForgotPassword/ForgotPasswordLink.styled.js","components/Auth/LoginForm/ForgotPassword/ForgotPasswordLink.jsx","components/Auth/LoginForm/LoginForm.jsx","components/Auth/RegisterForm/RegisterForm.styled.js","components/Auth/RegisterForm/RegisterForm.jsx","pages/RegisterPage.styled.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const StyledForm = styled.form`\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  min-height: 346px;\n  margin: auto 20px;\n  padding: 40px 20px;\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.white};\n  border-radius: 8px;\n  font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n    'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.s}) {\n    width: 335px;\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n    width: 480px;\n    min-height: 424px;\n    padding: 40px;\n  }\n`;\n\nexport const HeadingWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 8px;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n    margin-bottom: 22px;\n  }\n`;\n\nexport const StyledHomeBtn = styled(Link)`\n  padding: 10px 15px;\n  background-color: ${({ theme }) => theme.colors.accent};\n  color: ${({ theme }) => theme.colors.white};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 18px;\n  letter-spacing: -0.02em;\n  box-shadow: ${({ theme }) => theme.shadows.authButton};\n  border-radius: 16px;\n  border-width: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  :hover {\n    background-color: ${({ theme }) => theme.colors.hovered};\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n    font-size: 18px;\n    line-height: 24px;\n  }\n`;\n\nexport const StyledHeading = styled.h2`\n  color: ${({ theme }) => theme.colors.accent};\n  font-size: 18px;\n  line-height: 24px;\n  font-weight: 600;\n  text-shadow: ${({ theme }) => theme.shadows.authHeading};\n  text-align: start;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n    font-size: 24px;\n  }\n`;\n","import {\n  Wrapper,\n  StyledInput,\n  StyledLabel,\n  StyledIcon,\n  InputContainer,\n  StyledInputNotification,\n  InputWrapper,\n  PasswordBtn,\n} from './AuthField.styled';\nimport { BiErrorCircle, BiCheckCircle } from 'react-icons/bi';\nimport PropTypes from 'prop-types';\nimport { useTheme } from '@emotion/react';\nimport { useEffect, useRef, useState } from 'react';\nimport { AiOutlineEye, AiOutlineEyeInvisible } from 'react-icons/ai';\n\nexport const AuthField = ({\n  valid,\n  onChange,\n  value,\n  name,\n  type,\n  placeholder,\n  errorMessage,\n  lableName,\n}) => {\n  const themeColors = useTheme().colors;\n\n  const passwordInputRef = useRef(null);\n  const [visible, setVisible] = useState(false);\n\n  const toggleBtn = e => {\n    e.preventDefault();\n    setVisible(prevState => !prevState);\n  };\n\n  useEffect(() => {\n    if (passwordInputRef.current) {\n      passwordInputRef.current.type = visible ? 'text' : 'password';\n    }\n  }, [visible]);\n\n  return (\n    <Wrapper>\n      <InputContainer>\n        <StyledLabel htmlFor={name.toLowerCase()} valid={valid}>\n          {lableName}\n        </StyledLabel>\n        <InputWrapper>\n          <StyledInput\n            id={name.toLowerCase()}\n            name={name.toLowerCase()}\n            lableName={lableName}\n            type={type}\n            onChange={onChange}\n            value={value}\n            placeholder={placeholder}\n            valid={valid}\n            ref={type === 'password' ? passwordInputRef : null}\n          />\n          {type === 'password' && (\n            <PasswordBtn onClick={toggleBtn}>\n              {visible ? (\n                <AiOutlineEye size={17} />\n              ) : (\n                <AiOutlineEyeInvisible size={17} />\n              )}\n            </PasswordBtn>\n          )}\n        </InputWrapper>\n        {valid === false && (\n          <StyledIcon>\n            <BiErrorCircle color={themeColors.failed} size={20} />\n          </StyledIcon>\n        )}\n        {valid && (\n          <StyledIcon>\n            <BiCheckCircle color={themeColors.saccess} size={20} />\n          </StyledIcon>\n        )}\n      </InputContainer>\n      {valid === false && (\n        <StyledInputNotification valid={valid}>\n          {errorMessage}\n        </StyledInputNotification>\n      )}\n    </Wrapper>\n  );\n};\n\nAuthField.propTypes = {\n  valid: PropTypes.oneOf([true, false, null]),\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  lableName: PropTypes.string.isRequired,\n  type: PropTypes.oneOf(['text', 'email', 'password']).isRequired,\n  placeholder: PropTypes.string.isRequired,\n  errorMessage: PropTypes.string,\n};\n","import styled from '@emotion/styled';\n\nexport const ForgotPasswordModalContainer = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 0px;\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n    padding-top: 70px;\n  }\n`;\n\nexport const ForgotHeading = styled.h2`\n  margin-bottom: 20px;\n  color: ${({ theme }) => theme.colors.accent};\n  font-size: 18px;\n  line-height: 24px;\n  font-weight: 600;\n  text-align: start;\n`;\n\nexport const ForgotForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n    'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n`;\n\n// export const ForgotLabel = styled.label`\n//   margin-bottom: 8px;\n// `;\n\n// export const ForgotEmailInput = styled.input`\n//   width: 100%;\n//   padding: 8px;\n//   margin-bottom: 25px;\n//   border: 1px solid ${({ theme }) => theme.colors.border};\n//   border-radius: 4px;\n// `;\n\nexport const ForgotButton = styled.button`\n  height: 100%;\n  width: auto;\n  background-color: ${({ theme }) => theme.colors.accent};\n  color: ${({ theme }) => theme.colors.white};\n  font-weight: 600;\n  font-family: inherit;\n  font-size: 14px;\n  line-height: 18px;\n  box-shadow: ${({ theme }) => theme.shadows.authButton};\n  border-radius: 10px;\n  border-width: 0;\n  padding: 10px 10px;\n  margin-top: 20px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.hovered};\n  }\n`;\n","// import React from 'react';\n// import { useFormik } from 'formik';\n// import { useDispatch } from 'react-redux';\n// import * as yup from 'yup';\n// // import { notification, useNotification } from 'helpers';\n\n// import {\n//   ForgotPasswordModalContainer,\n//   ForgotHeading,\n//   ForgotForm,\n//   ForgotEmailInput,\n//   ForgotButton,\n//   ForgotNotification,\n// } from './ForgotPasswordModal.styled';\n// import { getNewPassword } from '../../../../redux/auth/operations';\n// import CreateModal from '../../../../utils/Modal/Modal';\n\n// const loginSchema = yup.object().shape({\n//   email: yup\n//     .string()\n//     .email('Email must have @ and be a valid email')\n//     .required('Email is a required field'),\n// });\n\n// const ForgotPasswordModal = ({ show, onClose }) => {\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = async values => {\n//     try {\n//       const validationErrors = await formik.validateForm(); // Виклик функції валідації\n\n//       if (Object.keys(validationErrors).length === 0) {\n//         // Перевірка наявності помилок валідації\n//         const response = await dispatch(getNewPassword(formik.values.email));\n\n//         if (response.ok) {\n//           formik.setFieldValue('notification', 'Please check your email!');\n//           formik.setFieldValue('email', '');\n//         } else {\n//           // Обробити інші випадки\n//         }\n//       }\n//     } catch (error) {\n//       console.error('Error:', error);\n//     }\n//   };\n\n//   const formik = useFormik({\n//     initialValues: {\n//       email: '',\n//       notification: '',\n//     },\n//     validationSchema: loginSchema,\n//     onSubmit: handleSubmit,\n//   });\n\n//   return (\n//     <CreateModal show={show} onClose={onClose}>\n//       <ForgotPasswordModalContainer>\n//         <ForgotHeading>Confirm your email address</ForgotHeading>\n//         <ForgotForm onSubmit={formik.handleSubmit}>\n//           <ForgotEmailInput\n//             name=\"email\"\n//             placeholder=\"Enter email\"\n//             value={formik.values.email}\n//             type=\"email\"\n//             onChange={formik.handleChange}\n//           />\n//           {formik.errors.email && formik.touched.email && (\n//             <div>{formik.errors.email}</div>\n//           )}\n//           <ForgotButton type=\"submit\">Remind password</ForgotButton>\n//         </ForgotForm>\n//         {formik.values.notification && (\n//           <ForgotNotification>{formik.values.notification}</ForgotNotification>\n//         )}\n//       </ForgotPasswordModalContainer>\n//     </CreateModal>\n//   );\n// };\n\n// export default ForgotPasswordModal;\nimport { Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  ForgotPasswordModalContainer,\n  ForgotHeading,\n  ForgotForm,\n  ForgotButton,\n} from './ForgotPasswordModal.styled';\nimport { StyledInput } from '../../AuthField/AuthField.styled';\nimport { getNewPassword } from 'redux/auth/operations';\nimport CreateModal from 'utils/Modal/Modal';\nimport { notification, useNotification, getPasswordSchema } from 'helpers';\nimport { selectIsRefreshingUser } from 'redux/auth/selectors';\nimport { LoaderMini } from 'utils/Loader';\n\nconst ForgotPasswordModal = ({ show, onClose }) => {\n  const dispatch = useDispatch();\n  const isRefreshing = useSelector(selectIsRefreshingUser);\n\n  const toast = useNotification();\n\n  const handleSubmit = async (values, { resetForm }) => {\n    try {\n      const { payload } = await dispatch(getNewPassword(values.email));\n\n      if (payload.status === 201) {\n        notification(\n          toast,\n          'success',\n          'New password was sent to email. Please check'\n        );\n        values.notification = 'Please check your email';\n        resetForm();\n      } else {\n        notification(toast, 'fail', 'User with this email not found');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      notification(toast, 'fail', 'Something is wrong. Try a later');\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        notification: '',\n      }}\n      validationSchema={getPasswordSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values, handleSubmit, handleChange, errors, touched }) => (\n        <CreateModal show={show} onClose={onClose}>\n          <ForgotPasswordModalContainer>\n            <ForgotHeading>Confirm your email address</ForgotHeading>\n            {isRefreshing && <LoaderMini />}\n            {!isRefreshing && (\n              <ForgotForm onSubmit={handleSubmit}>\n                <StyledInput\n                  name=\"email\"\n                  placeholder=\"Enter email\"\n                  value={values.email}\n                  type=\"email\"\n                  onChange={handleChange}\n                />\n                {errors.email && touched.email && <div>{errors.email}</div>}\n                <ForgotButton type=\"submit\">Remind password</ForgotButton>\n              </ForgotForm>\n            )}\n          </ForgotPasswordModalContainer>\n        </CreateModal>\n      )}\n    </Formik>\n  );\n};\n\nexport default ForgotPasswordModal;\n","import styled from '@emotion/styled';\n\nexport const ForgotButtonLink = styled.button`\n  height: 100%;\n  width: auto;\n\n  color: ${({ theme }) => theme.colors.accent};\n  font-weight: 600;\n  font-family: inherit;\n  font-size: 14px;\n  line-height: 18px;\n  border-radius: 4px;\n  border-width: 0;\n  padding-top: 20px;\n  cursor: pointer;\n\n  &:hover {\n    text-decoration: underline;\n    color: red;\n  }\n`;\n","import React, { useState } from 'react';\nimport ForgotPasswordModal from './ForgotPasswordModal';\nimport { ForgotButtonLink } from './ForgotPasswordLink.styled';\n\nexport const ForgotPasswordLink = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <ForgotButtonLink type=\"button\" onClick={openModal}>\n        Forgot your password?\n      </ForgotButtonLink>\n      {isModalOpen && <ForgotPasswordModal onClose={closeModal} />}\n    </>\n  );\n};\n","import { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport {\n  HeadingWrapper,\n  StyledForm,\n  StyledHeading,\n  StyledHomeBtn,\n} from './LoginForm.styled';\nimport { AuthField } from '../AuthField/AuthField';\nimport { loginSchema } from 'helpers';\nimport { logIn } from '../../../redux/auth/operations';\nimport { notification, useNotification } from 'helpers';\nimport { MainBtn } from '../../../utils/Buttons/MainButton.styled';\nimport { CgLogIn } from 'react-icons/cg';\nimport { AiOutlineLeftCircle } from 'react-icons/ai';\n\nimport { ForgotPasswordLink } from './ForgotPassword/ForgotPasswordLink'; // Імпортуємо компонент ForgotPasswordLink\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const toast = useNotification();\n\n  const onSubmitForm = async (values, { resetForm }) => {\n    try {\n      const { payload } = await dispatch(logIn(values));\n      if (\n        payload === 'Request failed with status code 400' ||\n        payload === 'Request failed with status code 401'\n      ) {\n        notification(\n          toast,\n          'fail',\n          'Password or email is incorrect. Please check'\n        );\n        return;\n      } else if (payload === 'Request failed with status code 403') {\n        notification(\n          toast,\n          'fail',\n          'Email is not verified yet. Check email box for verification'\n        );\n        return;\n      } else if (payload === 'Request failed with status code 404') {\n        notification(toast, 'fail', 'User is not found. Please check email');\n        return;\n      }\n      resetForm();\n    } catch (err) {\n      console.log('Error===>', err);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validationSchema={loginSchema}\n      validateOnBlur={false}\n      validateOnChange={false}\n      onSubmit={onSubmitForm}\n    >\n      {({ values, handleSubmit, handleBlur, handleChange }) => (\n        <StyledForm onSubmit={handleSubmit}>\n          <HeadingWrapper>\n            <StyledHeading>Log In</StyledHeading>\n            <StyledHomeBtn to=\"/\">\n              Home\n              <AiOutlineLeftCircle\n                style={{\n                  marginLeft: 6,\n                }}\n              />\n            </StyledHomeBtn>\n          </HeadingWrapper>\n          <AuthField\n            name={'Email'}\n            lableName={'Email'}\n            value={values.email}\n            type={'email'}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            placeholder=\"Enter email\"\n          />\n          <AuthField\n            name={'Password'}\n            lableName={'Password'}\n            value={values.password}\n            type={'password'}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            placeholder=\"Enter password\"\n          />\n          <MainBtn style={{ width: '100%', marginTop: '32px' }} type=\"submit\">\n            Log in\n            <CgLogIn style={{ marginLeft: 11, width: 18, height: 18 }} />\n          </MainBtn>\n          <ForgotPasswordLink />\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\n// check main font size and line height and delete doubling\n// check using font family\n\nexport const StyledForm = styled.form`\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  min-height: 469px;\n  margin: auto 20px;\n  padding: 40px 20px;\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.white};\n  border-radius: 8px;\n  font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n    'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.s}) {\n    width: 335px;\n  }\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n    width: 480px;\n    min-height: 521px;\n    padding: 40px;\n  }\n`;\n\nexport const StyledHeading = styled.h2`\n  color: ${({ theme }) => theme.colors.accent};\n  font-size: 18px;\n  line-height: 24px;\n  font-weight: 600;\n  text-shadow: ${({ theme }) => theme.shadows.authHeading};\n  text-align: start;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.m}) {\n    font-size: 24px;\n  }\n`;\n\nexport const StyledInput = styled.div`\n  position: static;\n`;\n\nexport const StyledErrorMessage = styled.div`\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.17;\n  color: #da1414;\n  display: flex;\n  flex-direction: column;\n\n  //position: absolute;\n  //margin-top: -12px;\n  //margin-left: auto;\n  //margin-right: auto;\n  //padding-left: 18px;\n  //overflow: hidden;\n  //color: #DA1414;\n  //border: 0.15em solid #DA1414; => input\n  //white-space: nowrap;\n  //letter-spacing: 0.08em;\n  //\n  //@media screen and (min-width: 768px) {\n  //  margin-top: -16px;\n  //}\n  //\n  //@media screen and (min-width: 1440px) {\n  //  margin-top: -19px;\n  //}\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport {\n  StyledErrorMessage,\n  StyledForm,\n  StyledHeading,\n} from './RegisterForm.styled';\nimport { AuthField } from '../AuthField/AuthField';\nimport { registerSchema } from 'helpers/authFieldValidation';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../../redux/auth/operations';\nimport { notification, useNotification } from 'helpers';\nimport { useNavigate } from 'react-router-dom';\nimport { MainBtn } from '../../../utils/Buttons/MainButton.styled';\nimport { CgLogIn } from 'react-icons/cg';\nimport { HeadingWrapper, StyledHomeBtn } from '../LoginForm/LoginForm.styled';\nimport { AiOutlineLeftCircle } from 'react-icons/ai';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const toast = useNotification();\n\n  const onSubmitForm = async (values, { resetForm }) => {\n    try {\n      const { payload } = await dispatch(register(values));\n      if (payload !== {} || typeof payload !== 'string') {\n        notification(\n          toast,\n          'info',\n          'Check your email and approve registration'\n        );\n        navigate('/login');\n        resetForm();\n      }\n      if (typeof payload === 'string') {\n        notification(\n          toast,\n          'fail',\n          'User with this email already exists. Please log in'\n        );\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        username: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={registerSchema}\n      validateOnBlur={false}\n      validateOnChange={false}\n      onSubmit={onSubmitForm}\n    >\n      {({ values, handleSubmit, handleBlur, handleChange }) => (\n        <StyledForm onSubmit={handleSubmit}>\n          <HeadingWrapper>\n            <StyledHeading>Sign Up</StyledHeading>\n            <StyledHomeBtn to=\"/\">\n              Home\n              <AiOutlineLeftCircle\n                style={{\n                  marginLeft: 6,\n                }}\n              />\n            </StyledHomeBtn>\n          </HeadingWrapper>\n          <AuthField\n            name={'username'}\n            lableName={'Name'}\n            value={values.username}\n            type={'text'}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            placeholder=\"Enter your name\"\n          />\n          <ErrorMessage component={StyledErrorMessage} name=\"username\" />\n\n          <AuthField\n            name={'Email'}\n            lableName={'Email'}\n            value={values.email}\n            type={'email'}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            placeholder=\"Enter email\"\n          />\n          <ErrorMessage component={StyledErrorMessage} name=\"email\" />\n\n          <AuthField\n            name={'Password'}\n            lableName={'Password'}\n            value={values.password}\n            type={'password'}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            placeholder=\"Enter password\"\n          />\n          <ErrorMessage component={StyledErrorMessage} name=\"password\" />\n\n          <MainBtn style={{ width: '100%', marginTop: '32px' }} type=\"submit\">\n            Sign Up\n            <CgLogIn style={{ marginLeft: 11, width: 18, height: 18 }} />\n          </MainBtn>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nimport { themes } from 'styles/themes';\nimport { device } from '../styles/mediaVeriables';\nexport const RegisterPageContainer = styled.div`\n  background-color: ${themes.colors.backgroundAuth};\n  min-height: 100vh;\n  width: 100%;\n  padding: 20px 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const RegisterPageWrap = styled.div`\n  text-align: center;\n`;\nexport const StyledNavLink = styled(Link)`\n  display: block;\n  margin-top: ${themes.fontSizes.l};\n  color: ${themes.colors.accent};\n  font-weight: ${themes.fontWeight.sb};\n  font-size: ${themes.fontSizes.xs};\n  line-height: 1.17;\n  text-decoration-line: underline;\n  cursor: pointer;\n  text-shadow: 0px 47px 355px rgba(0, 0, 0, 0.07),\n    0px 9.4px 57.6875px rgba(0, 0, 0, 0.035);\n\n  @media ${device.tablet} {\n    font-size: 18px;\n    line-height: 1.33;\n    margin-top: ${themes.fontSizes.xxl};\n  }\n\n  :hover {\n    color: #2c66bc;\n  }\n`;\n\nexport const NavWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  align-items: center;\n`;\n\nexport const Img = styled.img`\n  display: none;\n\n  @media ${device.desktop} {\n    display: block;\n    width: 400px;\n    height: 416px;\n    position: absolute;\n    left: 49px;\n    bottom: 0;\n  }\n`;\n"],"names":["StyledForm","styled","theme","colors","white","breakpoints","s","m","HeadingWrapper","StyledHomeBtn","Link","accent","shadows","authButton","hovered","StyledHeading","authHeading","AuthField","valid","onChange","value","name","type","placeholder","errorMessage","lableName","themeColors","useTheme","passwordInputRef","useRef","useState","visible","setVisible","useEffect","current","htmlFor","toLowerCase","id","ref","onClick","e","preventDefault","prevState","size","color","failed","saccess","ForgotPasswordModalContainer","ForgotHeading","ForgotForm","ForgotButton","show","onClose","dispatch","useDispatch","isRefreshing","useSelector","selectIsRefreshingUser","toast","useNotification","handleSubmit","values","resetForm","getNewPassword","email","payload","status","notification","console","error","initialValues","validationSchema","getPasswordSchema","onSubmit","handleChange","errors","touched","Loader","L","ForgotButtonLink","ForgotPasswordLink","isModalOpen","setIsModalOpen","LoginForm","onSubmitForm","logIn","log","password","loginSchema","validateOnBlur","validateOnChange","handleBlur","to","style","marginLeft","onBlur","width","marginTop","height","StyledErrorMessage","RegisterForm","navigate","useNavigate","register","username","registerSchema","component","RegisterPageContainer","themes","RegisterPageWrap","StyledNavLink","device","NavWrap","Img"],"sourceRoot":""}